"use strict";(self.webpackChunkgenopipe=self.webpackChunkgenopipe||[]).push([[778],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>m});var r=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var c=r.createContext({}),l=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=l(e.components);return r.createElement(c.Provider,{value:t},e.children)},s="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},f=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,a=e.originalType,c=e.parentName,u=p(e,["components","mdxType","originalType","parentName"]),s=l(n),f=i,m=s["".concat(c,".").concat(f)]||s[f]||d[f]||a;return n?r.createElement(m,o(o({ref:t},u),{},{components:n})):r.createElement(m,o({ref:t},u))}));function m(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=n.length,o=new Array(a);o[0]=f;var p={};for(var c in t)hasOwnProperty.call(t,c)&&(p[c]=t[c]);p.originalType=e,p[s]="string"==typeof e?e:i,o[1]=p;for(var l=2;l<a;l++)o[l]=n[l];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}f.displayName="MDXCreateElement"},7593:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>d,frontMatter:()=>a,metadata:()=>p,toc:()=>l});var r=n(7462),i=(n(7294),n(3905));const a={id:"input",title:"",sidebar_label:"Input Files (-i)"},o="Input(-i)",p={unversionedId:"StrainID/input",id:"StrainID/input",title:"",description:"StrainID takes a directory pathname for the input and will run StrainID on all the BAM files (*.bam) it finds within that directory path when you execute identify-Strain.sh.",source:"@site/docs/StrainID/input.md",sourceDirName:"StrainID",slug:"/StrainID/input",permalink:"/GenoPipe-docs/docs/StrainID/input",draft:!1,editUrl:"https://github.com/CEGRcode/GenoPipe-docs/docs/StrainID/input.md",tags:[],version:"current",frontMatter:{id:"input",title:"",sidebar_label:"Input Files (-i)"},sidebar:"strainSidebar",previous:{title:"Usage",permalink:"/GenoPipe-docs/docs/StrainID/"},next:{title:"Genome Files (-g)",permalink:"/GenoPipe-docs/docs/StrainID/genome"}},c={},l=[],u={toc:l},s="wrapper";function d(e){let{components:t,...n}=e;return(0,i.kt)(s,(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"input-i"},"Input(",(0,i.kt)("inlineCode",{parentName:"h1"},"-i"),")"),(0,i.kt)("p",null,"StrainID takes a directory pathname for the input and will run StrainID on all the BAM files (",(0,i.kt)("inlineCode",{parentName:"p"},"*.bam"),") it finds within that directory path when you execute ",(0,i.kt)("inlineCode",{parentName:"p"},"identify-Strain.sh"),"."),(0,i.kt)("admonition",{type:"caution"},(0,i.kt)("p",{parentName:"admonition"},"Input BAM files, VCF reference files, and Genome reference files all NEED to be based on the same genome build. Do not mix and match for this!")))}d.isMDXComponent=!0}}]);