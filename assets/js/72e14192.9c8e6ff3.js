"use strict";(self.webpackChunkgenopipe=self.webpackChunkgenopipe||[]).push([[239],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>m});var o=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},a=Object.keys(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=o.createContext({}),l=function(e){var t=o.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},d=function(e){var t=l(e.components);return o.createElement(s.Provider,{value:t},e.children)},c="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},h=o.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,s=e.parentName,d=p(e,["components","mdxType","originalType","parentName"]),c=l(n),h=r,m=c["".concat(s,".").concat(h)]||c[h]||u[h]||a;return n?o.createElement(m,i(i({ref:t},d),{},{components:n})):o.createElement(m,i({ref:t},d))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,i=new Array(a);i[0]=h;var p={};for(var s in t)hasOwnProperty.call(t,s)&&(p[s]=t[s]);p.originalType=e,p[c]="string"==typeof e?e:r,i[1]=p;for(var l=2;l<a;l++)i[l]=n[l];return o.createElement.apply(null,i)}return o.createElement.apply(null,n)}h.displayName="MDXCreateElement"},4181:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>u,frontMatter:()=>a,metadata:()=>p,toc:()=>l});var o=n(7462),r=(n(7294),n(3905));const a={id:"quick-start",title:"Quick Start",sidebar_label:"Quick Start"},i=void 0,p={unversionedId:"quick-start",id:"quick-start",title:"Quick Start",description:'These are quick setup instructions for running each of the GenoPipe modules "out-of-the-box" using the provided pre-generated sacCer3 and hg19 reference files. For more details on customizations or reading reports, check out the module-specific pages (EpitopeID, DeletionID, and StrainID)',source:"@site/docs/quick-start.md",sourceDirName:".",slug:"/quick-start",permalink:"/docs/quick-start",draft:!1,tags:[],version:"current",lastUpdatedBy:"Olivia Wen-Mei Lang",lastUpdatedAt:1687466045,formattedLastUpdatedAt:"Jun 22, 2023",frontMatter:{id:"quick-start",title:"Quick Start",sidebar_label:"Quick Start"},sidebar:"generalSidebar",previous:{title:"Welcome",permalink:"/docs/welcome"}},s={},l=[{value:"Download &amp; Dependencies",id:"download--dependencies",level:2},{value:"ENCODE example (human)",id:"encode-example-human",level:2},{value:"Get data &amp; set-up GenoPipe",id:"get-data--set-up-genopipe",level:3},{value:"Run EpitopeID",id:"run-epitopeid",level:3},{value:"Run StrainID",id:"run-strainid",level:3},{value:"Final Directory Structure",id:"final-directory-structure",level:3},{value:"ChIP-exo example (yeast)",id:"chip-exo-example-yeast",level:2},{value:"Get data &amp; set-up GenoPipe",id:"get-data--set-up-genopipe-1",level:3},{value:"Run StrainID",id:"run-strainid-1",level:3},{value:"Run DeletionID",id:"run-deletionid",level:3},{value:"Final Directory Structure",id:"final-directory-structure-1",level:3},{value:"More examples",id:"more-examples",level:2}],d={toc:l},c="wrapper";function u(e){let{components:t,...n}=e;return(0,r.kt)(c,(0,o.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,'These are quick setup instructions for running each of the GenoPipe modules "out-of-the-box" using the provided pre-generated sacCer3 and hg19 reference files. For more details on customizations or reading reports, check out the module-specific pages (',(0,r.kt)("a",{parentName:"p",href:"/docs/EpitopeID/"},"EpitopeID"),", ",(0,r.kt)("a",{parentName:"p",href:"/docs/DeletionID/"},"DeletionID"),", and ",(0,r.kt)("a",{parentName:"p",href:"/docs/StrainID"},"StrainID"),")"),(0,r.kt)("h2",{id:"download--dependencies"},"Download & Dependencies"),(0,r.kt)("p",null,"To download GenoPipe, you can clone the repository or directly download the code. No builds needed."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"# Download GenoPipe\ncd /User/joeschmoe/Desktop\ngit clone https://github.com/CEGRcode/GenoPipe.git\n")),(0,r.kt)("p",null,"Make sure all ",(0,r.kt)("strong",{parentName:"p"},"dependencies")," are installed by referenceing each module's dependency guide:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/docs/EpitopeID/#dependencies"},"EpitopeID dependencies")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/docs/StrainID/#dependencies"},"StrainID dependencies")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/docs/DeletionID/#dependencies"},"DeletionID dependencies"))),(0,r.kt)("p",null,"You could create a conda environment of all the dependencies together:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"conda create -n genopipe-env -c bioconda -c conda-forge bedtools bowtie2 bwa perl numpy scipy pysam wget samtools\n")),(0,r.kt)("h2",{id:"encode-example-human"},"ENCODE example (human)"),(0,r.kt)("p",null,"Say we performed some K562 ChIP-seq for an eGFP epitope-tagged strain and we want to validate that the cell line background is K562 (StrainID) and that the epitope correctly targeted the DDX20 gene (EpitopeID). For this exercise, we will be pulling data files from the ENCODE experiment ",(0,r.kt)("a",{parentName:"p",href:"https://www.encodeproject.org/experiments/ENCSR978IXJ/"},"ENCSR978IXJ")," including the raw FASTQ files and the BAM files downstream in the processing pipeline."),(0,r.kt)("h3",{id:"get-data--set-up-genopipe"},"Get data & set-up GenoPipe"),(0,r.kt)("p",null,"For this example, we are working from the ",(0,r.kt)("inlineCode",{parentName:"p"},"/User/joeschmoe/Desktop")," directory on some Linux/MacOS machine. Run the following code to set-up your input/output directories and download data from ENCODE."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"# Make input directories\n[ -d hg19_FASTQ ] || mkdir hg19_FASTQ\n[ -d hg19_BAM ] || mkdir hg19_BAM\n\n# Download hg19 eGFP tagged strain test files\nwget -c https://www.encodeproject.org/files/ENCFF467ZVS/@@download/ENCFF467ZVS.fastq.gz -O hg19_FASTQ/ENCSR978IXJ_R1.fastq.gz\nwget -c https://www.encodeproject.org/files/ENCFF969JRS/@@download/ENCFF969JRS.fastq.gz -O hg19_FASTQ/ENCSR978IXJ_R2.fastq.gz\n\n# Download hg19 ENCODE-CellLines test files\nwget -c https://www.encodeproject.org/files/ENCFF548ERH/@@download/ENCFF548ERH.bam -O hg19_BAM/ENCSR978IXJ.bam\n\n# Make output directories\n[ -d hg19_epitopeid_reports ] || mkdir hg19_epitopeid_reports\n[ -d hg19_strainid_reports ] || mkdir hg19_strainid_reports\n\n# Download hg19 genome & move it to EpiID db directory\ncd GenoPipe/EpitopeID/utility_scripts/genome_data\nbash download_hg19_Genome.sh\nmv genome.fa* ../../hg19_EpiID/FASTA_genome/\n")),(0,r.kt)("h3",{id:"run-epitopeid"},"Run EpitopeID"),(0,r.kt)("p",null,"Execute the shell script to run EpitopeID - make sure to use absolute paths"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"cd /User/joeschmoe/Desktop/GenoPipe/EpitopeID\nbash identify-Epitope.sh -t 4 \\\n  -i /User/joeschmoe/Desktop/hg19_FASTQ \\\n  -d /User/joeschmoe/Desktop/GenoPipe/EpitopeID/hg19_EpiID \\\n  -o /User/joeschmoe/Desktop/hg19_epitopeid_reports\n")),(0,r.kt)("p",null,"Your output should look something like this"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"EpitopeID   EpitopeCount\nLAP-tag 48\n\nGeneID  EpitopeID   EpitopeLocation EpitopeCount    pVal\nDDX20|chr1:112298190-112310199  LAP-tag C-term  5   5.582970412927705e-20\n")),(0,r.kt)("h3",{id:"run-strainid"},"Run StrainID"),(0,r.kt)("p",null,"Execute the shell script to run StrainID - make sure to use absolute paths"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"cd /User/joeschmoe/Desktop/GenoPipe/StrainID\nbash identify-Strain.sh \\\n  -i /User/joeschmoe/Desktop/hg19_BAM \\\n  -g /User/joeschmoe/Desktop/GenoPipe/EpitopeID/hg19_EpiID/FASTA_genome/genome.fa \\\n  -v /User/joeschmoe/Desktop/GenoPipe/StrainID/hg19_VCF \\\n  -o /User/joeschmoe/Desktop/hg19_strainid_reports \\\n")),(0,r.kt)("p",null,"Your output should look something like this"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"    ENCFF548ERH.bam\nA549.vcf    -3.231404275463283\nHCT116.vcf  -2.1269379376931563\nHELA.vcf    0.10841794080447699\nHepG2.vcf   -0.5427718460680672\nK562.vcf    5.683476830951074\nLnCap.vcf   -2.342453230210475\nMCF7.vcf    NaN\nSKnSH.vcf   -1.481786644732225\n")),(0,r.kt)("h3",{id:"final-directory-structure"},"Final Directory Structure"),(0,r.kt)("p",null,"Your directory structure after running the above should look like:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"/User/joeschmoe/Desktop\n  |--GenoPipe\n  |  |--EpitopeID\n  |  |  |--...\n  |  |--DeletionID\n  |  |  |--...\n  |  |--StrainID\n  |  |  |--...\n  |--hg19_FASTQ\n  |  |--ENCSR978IXJ_R1.fastq.gz\n  |  |--ENCSR978IXJ_R2.fastq.gz\n  |--hg19_BAM\n  |  |--ENCSR978IXJ.bam\n  |--hg19_epitopeid_reports\n  |  |--ENCSR978IXJ_R1-ID.tab\n  |--hg19_strainid_reports\n     |--ENCSR978IXJ_strain.tab\n")),(0,r.kt)("h2",{id:"chip-exo-example-yeast"},"ChIP-exo example (yeast)"),(0,r.kt)("p",null,"Say we performed some ChIP-exo for an TAP epitope-tagged strain and we want to validate that the background is BY4741 (StrainID) and that the yeast strain was constructed from a Leu2, Ura3, and Met17 whole-gene knockout background (DeletionID). For this exercise, we will be pulling BAM data files from the ",(0,r.kt)("a",{parentName:"p",href:"http://www.yeastepigenome.org/"},"Yeast Epigenome Project"),"."),(0,r.kt)("h3",{id:"get-data--set-up-genopipe-1"},"Get data & set-up GenoPipe"),(0,r.kt)("p",null,"For this example, we are working from the ",(0,r.kt)("inlineCode",{parentName:"p"},"/User/joeschmoe/Desktop")," directory on some Linux/MacOS machine. Run the following code to set-up your input/output directories and download data from ENCODE."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"# Make input directories\n[ -d sacCer3_BAM ] || mkdir sacCer3_BAM\n\n# Download sacCer3 BAM files from The Yeast Epigenome Project\nwget -c https://www.datacommons.psu.edu/download/eberly/pughlab/yeast-epigenome-project/12467_YEP.zip\nunzip 12467_YEP.zip\nmv 12467_YEP/12467_filtered.bam sacCer3_BAM/12467_Reb1_i5006_BY4741_-_YPD_-_XO_FilteredBAM.bam\n\n# Make output directories\n[ -d sacCer3_strainid_reports ] || mkdir sacCer3_strainid_reports\n[ -d sacCer3_deletionid_reports ] || mkdir sacCer3_deletionid_reports\n\n# Download sacCer3 genome & move it to EpiID db directory\ncd GenoPipe/EpitopeID/utility_scripts/genome_data\nbash download_sacCer3_Genome.sh\nmv genome.fa* ../../sacCer3_EpiID/FASTA_genome/\n")),(0,r.kt)("h3",{id:"run-strainid-1"},"Run StrainID"),(0,r.kt)("p",null,"Execute the shell script to run StrainID - make sure to use absolute paths"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"cd /User/joeschmoe/Desktop/GenoPipe/StrainID\nbash identify-Strain.sh \\\n  -i /User/joeschmoe/Desktop/sacCer3_BAM \\\n  -g /User/joeschmoe/Desktop/GenoPipe/EpitopeID/sacCer3_EpiID/FASTA_genome/genome.fa \\\n  -v /User/joeschmoe/Desktop/GenoPipe/StrainID/sacCer3_VCF \\\n  -o /User/joeschmoe/Desktop/sacCer3_strainid_reports \\\n")),(0,r.kt)("p",null,"Your output should look something like this:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"    12467_Reb1_i5006_BY4741_-_YPD_-_XO_FilteredBAM.bam\nBY4741.gatk.vcf 3.740238715171018\nBY4742.gatk.vcf 1.0276164735202507\nCEN.PK2-1Ca.gatk.vcf    -1.5516470878685054\nD273-10B.gatk.vcf   -1.596023423608337\nFL100.gatk.vcf  -0.05547786250012817\nJK9-3d.gatk.vcf -1.2626920465354035\nRM11-1A.gatk.vcf    -1.5472519963103177\nSEY6210.gatk.vcf    1.233358965759852\nSigma1278b-10560-6B.gatk.vcf    -1.5683632971271528\nW303.gatk.vcf   -0.8350038260150588\nY55.gatk.vcf    -2.254742786500095\n\n")),(0,r.kt)("h3",{id:"run-deletionid"},"Run DeletionID"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"cd /User/joeschmoe/Desktop/GenoPipe/DeletionID\nbash identify-Deletion.sh \\\n  -i /User/joeschmoe/Desktop/sacCer3_BAM \\\n  -d /User/joeschmoe/Desktop/GenoPipe/DeletionID/sacCer3_Del \\\n  -o /User/joeschmoe/Desktop/sacCer3_deletionid_reports\n")),(0,r.kt)("p",null,"Your output should look something like this:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"LEU2    No Data Detected\nURA3    No Data Detected\nMET17   No Data Detected\n")),(0,r.kt)("h3",{id:"final-directory-structure-1"},"Final Directory Structure"),(0,r.kt)("p",null,"Your directory structure after running the above should look like:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"/User/joeschmoe/Desktop\n  |--GenoPipe\n  |  |--EpitopeID\n  |  |  |--...\n  |  |--DeletionID\n  |  |  |--...\n  |  |--StrainID\n  |  |  |--...\n  |--sacCer3_BAM\n  |  |--12467_Reb1_i5006_BY4741_-_YPD_-_XO_FilteredBAM.bam\n  |--sacCer3_strainid_reports\n  | |--12467_Reb1_i5006_BY4741_-_YPD_-_XO_FilteredBAM_strain.tab\n  |--sacCer3_deletionid_reports\n    |--12467_Reb1_i5006_BY4741_-_YPD_-_XO_FilteredBAM_deletion.tab\n")),(0,r.kt)("h2",{id:"more-examples"},"More examples"),(0,r.kt)("p",null,"To demonstrate the utility of EpitopeID in another practice exercise, you can try re-running EpitopeID after downloading the following FASTQ files. What do the reports suggest about these two samples from ",(0,r.kt)("a",{parentName:"p",href:"https://www.encodeproject.org/experiments/ENCSR130PDE/"},"ENCSR130PDE")," and ",(0,r.kt)("a",{parentName:"p",href:"https://www.encodeproject.org/experiments/ENCSR005NMT/"},"ENCSR005NMT"),"?"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"# ENCODE's NR4A1-eGFP ChIP-seq\nwget -c https://www.encodeproject.org/files/ENCFF671VDI/@@download/ENCFF671VDI.fastq.gz -O hg19_FASTQ/ENCFF671VDI_R1.fastq.gz\nwget -c https://www.encodeproject.org/files/ENCFF301GRJ/@@download/ENCFF301GRJ.fastq.gz -O hg19_FASTQ/ENCFF671VDI_R2.fastq.gz\n\n# ENCODE's ID3-eGFP ChIP-seq\nwget -c https://www.encodeproject.org/files/ENCFF548RTA/@@download/ENCFF548RTA.fastq.gz -O hg19_FASTQ/ENCFF548RTA_R1.fastq.gz\nwget -c https://www.encodeproject.org/files/ENCFF916QKA/@@download/ENCFF916QKA.fastq.gz -O hg19_FASTQ/ENCFF548RTA_R2.fastq.gz\n")),(0,r.kt)("p",null,"To demonstrate the utility of StrainID in another practice exercise, you can try re-running StrainID after downloading the following BAM files. What do the reports suggest about these two samples that may have been generated in the same batch (from ",(0,r.kt)("a",{parentName:"p",href:"https://www.encodeproject.org/experiments/ENCSR210RWL/"},"ENCSR210RWL")," and ",(0,r.kt)("a",{parentName:"p",href:"https://www.encodeproject.org/experiments/ENCSR927XBT/"},"ENCSR927XBT"),")?"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"# Two of ENCODE's shRNA knockdown RNA-seq datasets, both processed on 2016-04-14\n# HepG2\nwget -c https://www.encodeproject.org/files/ENCFF492NHB/@@download/ENCFF492NHB.bam -O hg19_BAM/ENCFF492NHB.bam\n# K562\nwget -c https://www.encodeproject.org/files/ENCFF745DNT/@@download/ENCFF745DNT.bam -O hg19_BAM/ENCFF745DNT.bam\n")))}u.isMDXComponent=!0}}]);